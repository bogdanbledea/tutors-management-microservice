{"version":3,"sources":["components/commons/Header/Header.styled.tsx","components/commons/Header/Header.tsx","components/commons/Table/Table.styled.tsx","components/commons/Table/Table.tsx","components/commons/Button/Button.styled.tsx","components/commons/Button/Button.tsx","components/ManageTutors/ManageTutors.tsx","components/Tutors/Tutors.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Title","styled","div","Header","Table","table","Td","td","Th","th","Button","button","props","color","onClick","children","showToast","toast","success","configure","ManageTutors","Fragment","Tutors","App","axios","get","process","then","res","console","log","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kZAEO,IAAMA,EAAQC,IAAOC,IAAV,KCKHC,EAJA,WACb,OAAO,kBAACH,EAAD,wC,gYCDF,IAAMI,EAAQH,IAAOI,MAAV,KAMLC,EAAKL,IAAOM,GAAV,KAKFC,EAAKP,IAAOQ,GAAV,KCmBAL,EA7BD,WACZ,OACE,kBAAC,EAAD,KACE,4BACE,kBAACI,EAAD,WACA,kBAACA,EAAD,aACA,kBAACA,EAAD,uBACA,kBAACA,EAAD,YACA,kBAACA,EAAD,eACA,kBAACA,EAAD,cACA,kBAACA,EAAD,qBACA,kBAACA,EAAD,oBACA,kBAACA,EAAD,mBAEF,4BACE,kBAACF,EAAD,UACA,kBAACA,EAAD,sBACA,kBAACA,EAAD,kBACA,kBAACA,EAAD,mBACA,kBAACA,EAAD,aACA,kBAACA,EAAD,wCACA,kBAACA,EAAD,qBACA,kBAACA,EAAD,uBACA,kBAACA,EAAD,6B,yLCxBD,IAAMI,EAAST,IAAOU,OAAV,KAMG,SAAAC,GAAK,OAAIA,EAAMC,SCDtBH,EAJA,SAACE,GACd,OAAO,kBAAC,EAAD,iBAAgBA,EAAhB,CAAuBE,QAASF,EAAME,SAAaF,EAAMG,Y,OCC5DC,G,MAAY,WAChBC,IAAMC,QAAQ,+BAGhBD,IAAME,YAEN,IASeC,EATM,WACnB,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQR,MAAM,QAAQC,QAASE,GAA/B,eCHSM,EATA,WACb,OACE,kBAAC,IAAMD,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCUSE,MAbf,WAME,OAJAC,IAAMC,IAAN,gEADmBC,qEAElBC,MAAK,SAAAC,GACJC,QAAQC,IAAIF,MAGZ,yBAAKG,UAAU,OACb,kBAAC,EAAD,QCDcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.caef2bdb.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Title = styled.div`\r\n  font-size: 24px;\r\n  font-weight: 700;\r\n  margin-bottom:32px;\r\n`;","import React from 'react';\r\nimport { Title } from './Header.styled';\r\n\r\nconst Header = () => {\r\n  return <Title>Tutors management microservice</Title>\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport const Table = styled.table`\r\n  border:1px solid #bdc3c7;\r\n  border-collapse:collapse;\r\n  margin: 10px 0;\r\n`;\r\n\r\nexport const Td = styled.td`\r\n  border: 1px solid #bdc3c7;\r\n  padding:10px;\r\n`;\r\n\r\nexport const Th = styled.th`\r\n  border: 1px solid #bdc3c7;\r\n  padding:10px;\r\n`;","import React from 'react';\r\nimport { Table as StyledTable, Th, Td} from '../Table/Table.styled';\r\nimport Button from '../Button/Button';\r\n\r\nconst Table = () => {\r\n  return (\r\n    <StyledTable>\r\n      <tr>\r\n        <Th>id</Th>\r\n        <Th>Name</Th>\r\n        <Th>Didactic grade</Th>\r\n        <Th>DOB</Th>\r\n        <Th>Office</Th>\r\n        <Th>email</Th>\r\n        <Th>Phone number</Th>\r\n        <Th>Departament</Th>\r\n        <Th>Hire date</Th>\r\n      </tr>\r\n      <tr>\r\n        <Td>1</Td>\r\n        <Td>Bogdan Bledea</Td>\r\n        <Td>Assistent</Td>\r\n        <Td>19/01/1997</Td>\r\n        <Td>B226</Td>\r\n        <Td>bledeabogdanalexandru@gmail.com</Td>\r\n        <Td>+40729095510</Td>\r\n        <Td>Communications</Td>\r\n        <Td>27 September 2019</Td>\r\n      </tr>\r\n    </StyledTable>\r\n  )\r\n}\r\n\r\nexport default Table;","import styled from 'styled-components';\r\nimport { ButtonProps } from './ButtonProps';\r\n\r\nexport const Button = styled.button<ButtonProps>`\r\n  border:0;\r\n  color:white;\r\n  padding:10px;\r\n  border-radius:5px;\r\n  cursor: pointer;\r\n  background-color: ${props => props.color};\r\n`;","import React from 'react';\r\nimport { Button as BaseButton } from './Button.styled';\r\nimport { ButtonProps } from './ButtonProps';\r\n\r\nconst Button = (props: ButtonProps) => {\r\n  return <BaseButton {...props} onClick={props.onClick} {...props.children} />\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport Table from '../commons/Table/Table';\r\nimport Button from '../commons/Button/Button';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst showToast = () => {\r\n  toast.success(\"Tutor added successfully!\");\r\n}\r\n\r\ntoast.configure();\r\n\r\nconst ManageTutors = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <Table />\r\n      <Button color=\"green\" onClick={showToast}>Add tutor</Button>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default ManageTutors;","import React from 'react';\r\nimport Header from '../commons/Header/Header';\r\nimport ManageTutors from '../ManageTutors/ManageTutors';\r\n\r\nconst Tutors = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <Header />\r\n      <ManageTutors />\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default Tutors;","import React from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Tutors from './components/Tutors/Tutors';\n\nfunction App() {\n  const access_key = process.env.REACT_APP_API_KEY;\n  axios.get(`https://cc-tutors-api.appspot.com/tutors?access_token=${access_key}`)\n  .then(res => {\n    console.log(res);\n  })\n  return (\n    <div className=\"App\">\n      <Tutors />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}